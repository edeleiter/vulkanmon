# VulkanMon CI/CD Pipeline
# Builds and tests the VulkanMon game engine with comprehensive C++ unit testing
name: VulkanMon CI/CD

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]

env:
  BUILD_TYPE: Debug  # Use Debug for better test diagnostics

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Update system libraries
      run: sudo apt update

    - name: Install Vulkan SDK and dependencies
      run: |
        sudo apt install -y \
          mesa-vulkan-drivers \
          vulkan-tools \
          libvulkan-dev \
          vulkan-validationlayers \
          spirv-tools \
          libglm-dev \
          libstb-dev \
          libglfw3-dev \
          libassimp-dev \
          build-essential \
          cmake

    - name: Cache vcpkg dependencies
      uses: actions/cache@v3
      with:
        path: |
          ${{ github.workspace }}/vcpkg
          ${{ github.workspace }}/build/vcpkg_installed
        key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg.json', '**/vcpkg-configuration.json') }}
        restore-keys: |
          ${{ runner.os }}-vcpkg-

    - name: Configure CMake with vcpkg
      run: |
        cmake -B ${{ github.workspace }}/build \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake

    - name: Build VulkanMon
      run: cmake --build ${{ github.workspace }}/build --config ${{ env.BUILD_TYPE }} --parallel

    - name: Run C++ Unit Tests
      working-directory: ${{ github.workspace }}/build/tests_cpp
      run: |
        echo "Running VulkanMon C++ Unit Test Suite..."
        if [ -f "${{ env.BUILD_TYPE }}/vulkanmon_tests" ]; then
          ./${{ env.BUILD_TYPE }}/vulkanmon_tests --reporter=console::out=-::colour-mode=ansi
        elif [ -f "vulkanmon_tests" ]; then
          ./vulkanmon_tests --reporter=console::out=-::colour-mode=ansi
        else
          echo "Error: vulkanmon_tests executable not found"
          ls -la
          exit 1
        fi

    - name: Run specific test categories
      working-directory: ${{ github.workspace }}/build/tests_cpp
      run: |
        echo "Testing core systems..."
        if [ -f "${{ env.BUILD_TYPE }}/vulkanmon_tests" ]; then
          TESTS_EXEC="./${{ env.BUILD_TYPE }}/vulkanmon_tests"
        else
          TESTS_EXEC="./vulkanmon_tests"
        fi
        
        echo "=== Logger Tests ==="
        $TESTS_EXEC "[Logger]" || true
        echo "=== Camera Tests ==="
        $TESTS_EXEC "[Camera]" || true
        echo "=== ResourceManager Tests ==="
        $TESTS_EXEC "[ResourceManager]" || true
        echo "=== AssetManager Tests ==="
        $TESTS_EXEC "[AssetManager]" || true
        echo "=== ModelLoader Tests ==="
        $TESTS_EXEC "[ModelLoader]" || true

    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ env.BUILD_TYPE }}
        path: |
          ${{ github.workspace }}/build/tests_cpp/
          ${{ github.workspace }}/build/Debug/
          ${{ github.workspace }}/build/*.log
        retention-days: 7

    - name: Build summary
      if: always()
      run: |
        echo "## VulkanMon Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Type**: ${{ env.BUILD_TYPE }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Platform**: Ubuntu Latest" >> $GITHUB_STEP_SUMMARY
        echo "- **CMake Configuration**: vcpkg toolchain" >> $GITHUB_STEP_SUMMARY
        echo "- **Test Suite**: C++ Unit Tests (Catch2)" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ job.status }}" == "success" ]; then
          echo "- **Status**: All tests passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Status**: Build or tests failed" >> $GITHUB_STEP_SUMMARY
        fi

