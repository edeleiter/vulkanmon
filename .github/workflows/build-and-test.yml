# VulkanMon CI/CD Pipeline
# Builds and tests the VulkanMon game engine with comprehensive C++ unit testing
name: VulkanMon CI/CD

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]

env:
  BUILD_TYPE: Debug  # Use Debug for better test diagnostics

jobs:
  build-and-test:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            preset: ci-x64-linux
            test_exe: "./vulkanmon_tests"
          - os: windows-latest
            preset: ci-x64-windows
            test_exe: "Debug/vulkanmon_tests.exe"
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install system dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install -y \
          build-essential \
          cmake \
          ninja-build \
          curl \
          zip \
          unzip \
          tar \
          pkg-config \
          libx11-dev \
          libxinerama-dev \
          libxcursor-dev \
          libxi-dev \
          libxrandr-dev \
          xorg-dev \
          libglu1-mesa-dev

    - name: Install Vulkan development libraries
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Install Vulkan headers and loader from Ubuntu packages (more reliable for CI)
        sudo apt install -y \
          libvulkan-dev \
          vulkan-tools \
          vulkan-utility-libraries-dev \
          spirv-tools \
          glslang-tools \
          mesa-vulkan-drivers
        
        # Set VULKAN_SDK environment variable for compatibility
        echo "VULKAN_SDK=/usr" >> $GITHUB_ENV
        echo "VK_LAYER_PATH=/usr/share/vulkan/explicit_layer.d" >> $GITHUB_ENV

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgDirectory: '${{ github.workspace }}/vcpkg'
        vcpkgJsonGlob: 'vcpkg.json'

    - name: Configure and Build
      uses: lukka/run-cmake@v10
      with:
        configurePreset: '${{ matrix.preset }}'
        buildPreset: '${{ matrix.preset }}'

    - name: Run Complete Test Suite
      working-directory: ${{ github.workspace }}/build/tests_cpp
      run: |
        echo "Running VulkanMon Complete Test Suite (10 cases, 59 assertions)..."
        
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          if [ -f "Debug/vulkanmon_tests.exe" ]; then
            Debug/vulkanmon_tests.exe --reporter=console::out=-::colour-mode=ansi
          else
            echo "Error: vulkanmon_tests.exe executable not found"
            ls -la Debug/
            exit 1
          fi
        else
          if [ -f "vulkanmon_tests" ]; then
            ./vulkanmon_tests --reporter=console::out=-::colour-mode=ansi
          else
            echo "Error: vulkanmon_tests executable not found"
            ls -la
            exit 1
          fi
        fi

    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ${{ matrix.os }}-test-results
        path: |
          ${{ github.workspace }}/build/tests_cpp/${{ matrix.test_exe }}
          ${{ github.workspace }}/build/Debug/vulkanmon*
          ${{ github.workspace }}/build/*.log
        retention-days: 7

    - name: Build summary
      if: always()
      run: |
        echo "## VulkanMon CI Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Type**: ${{ env.BUILD_TYPE }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Platform**: ${{ matrix.os }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Preset**: ${{ matrix.preset }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Dependencies**: vcpkg managed" >> $GITHUB_STEP_SUMMARY
        echo "- **Test Framework**: Catch2 via vcpkg" >> $GITHUB_STEP_SUMMARY
        echo "- **Expected Tests**: 10 test cases, 59 assertions" >> $GITHUB_STEP_SUMMARY

