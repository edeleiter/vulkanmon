# VulkanMon CI/CD Pipeline
# Cross-platform build and test workflow for the VulkanMon game engine
# Runs comprehensive C++ unit testing on both Linux and Windows platforms

name: VulkanMon CI/CD

# Trigger Conditions:
# - Push to main or develop branches
# - Pull requests targeting main branch
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Global environment variables for all jobs
env:
  BUILD_TYPE: Debug  # Use Debug build for better test diagnostics and symbols

jobs:
  # Main build and test job that runs on multiple platforms
  build-and-test:
    # Cross-platform matrix strategy:
    # - Ubuntu: Uses Ninja generator with system Vulkan packages
    # - Windows: Uses Visual Studio 2022 with vcpkg-managed dependencies
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            preset: ci-x64-linux          # CMake preset for Linux builds
            test_exe: "./vulkanmon_tests" # Linux test executable path
          - os: windows-latest
            preset: ci-x64-windows             # CMake preset for Windows builds  
            test_exe: "Debug/vulkanmon_tests.exe" # Windows test executable path
    
    runs-on: ${{ matrix.os }}
    
    steps:
    # Step 1: Source Code Checkout
    # Downloads the repository code including vcpkg submodule
    - name: Checkout repository
      uses: actions/checkout@v4

    # Step 2: Linux System Dependencies (Conditional)
    # Only runs on Ubuntu to install build tools and system libraries
    # Windows relies on Visual Studio 2022 which is pre-installed on windows-latest
    - name: Install system dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install -y \
          build-essential \
          cmake \
          ninja-build \
          curl \
          zip \
          unzip \
          tar \
          pkg-config \
          libx11-dev \
          libxinerama-dev \
          libxcursor-dev \
          libxi-dev \
          libxrandr-dev \
          xorg-dev \
          libglu1-mesa-dev

    # Step 3: Vulkan SDK Installation (Linux Only)
    # Installs Vulkan development environment using Ubuntu system packages
    # More reliable than LunarG repository for CI environments
    - name: Install Vulkan development libraries
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt install -y \
          libvulkan-dev \
          vulkan-tools \
          vulkan-utility-libraries-dev \
          spirv-tools \
          glslang-tools \
          mesa-vulkan-drivers
        
        echo "VULKAN_SDK=/usr" >> $GITHUB_ENV
        echo "VK_LAYER_PATH=/usr/share/vulkan/explicit_layer.d" >> $GITHUB_ENV

    # Step 4: Vulkan SDK Installation (Windows Only)
    # Downloads and installs Vulkan SDK including glslangValidator
    # Required for shader compilation in CMakeLists.txt
    - name: Install Vulkan SDK
      if: matrix.os == 'windows-latest'
      run: |
        echo "Downloading Vulkan SDK..."
        curl -L -o VulkanSDK.exe https://sdk.lunarg.com/sdk/download/1.3.290.0/windows/VulkanSDK-1.3.290.0-Installer.exe
        echo "Installing Vulkan SDK..."
        ./VulkanSDK.exe --accept-licenses --default-answer --confirm-command install
        echo "VULKAN_SDK=C:\VulkanSDK\1.3.290.0" >> $env:GITHUB_ENV
        echo "C:\VulkanSDK\1.3.290.0\Bin" >> $env:GITHUB_PATH

    # Step 5: vcpkg Dependency Management
    # Sets up cross-platform C++ package manager
    # Handles: GLFW, GLM, Assimp, STB, Catch2, and Vulkan (Windows only)
    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgDirectory: '${{ github.workspace }}/vcpkg'  # Use repo's vcpkg submodule
        vcpkgJsonGlob: 'vcpkg.json'                      # Dependency manifest file

    # Step 6: CMake Configuration and Build
    # Uses platform-specific presets defined in CMakePresets.json
    # - Linux: ci-x64-linux (Ninja generator)
    # - Windows: ci-x64-windows (Visual Studio 2022)
    - name: Configure and Build
      uses: lukka/run-cmake@v10
      with:
        configurePreset: '${{ matrix.preset }}'  # Platform-specific CMake preset
        buildPreset: '${{ matrix.preset }}'      # Platform-specific build preset

    # Step 7: Execute Unit Test Suite
    # Runs comprehensive C++ unit tests using Catch2 framework
    # Platform-specific executable paths and validation
    - name: Run Complete Test Suite
      working-directory: ${{ github.workspace }}/build/tests_cpp
      run: |
        echo "Running VulkanMon Complete Test Suite (10 cases, 59 assertions)..."
        
        # Platform-specific test execution:
        # Windows: Debug/vulkanmon_tests.exe (Visual Studio output structure)
        # Linux: vulkanmon_tests (direct executable)
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          if [ -f "Debug/vulkanmon_tests.exe" ]; then
            Debug/vulkanmon_tests.exe --reporter=console::out=-::colour-mode=ansi
          else
            echo "Error: vulkanmon_tests.exe executable not found"
            ls -la Debug/
            exit 1
          fi
        else
          if [ -f "vulkanmon_tests" ]; then
            ./vulkanmon_tests --reporter=console::out=-::colour-mode=ansi
          else
            echo "Error: vulkanmon_tests executable not found"
            ls -la
            exit 1
          fi
        fi

    # Step 8: Archive Build Artifacts
    # Uploads test executables, main application, and build logs for debugging
    # Runs even if previous steps fail (if: always())
    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ${{ matrix.os }}-test-results        # Platform-specific artifact names
        path: |
          ${{ github.workspace }}/build/tests_cpp/vulkanmon_tests*  # Test executables
          ${{ github.workspace }}/build/Debug/vulkanmon*            # Main application
          ${{ github.workspace }}/build/*.log                       # Build logs
        retention-days: 7

    # Step 9: Generate Build Summary
    # Creates a summary report visible in GitHub Actions UI
    # Always runs to provide build information even on failure
    - name: Build summary
      if: always()
      run: |
        echo "## VulkanMon CI Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Type**: ${{ env.BUILD_TYPE }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Platform**: ${{ matrix.os }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Preset**: ${{ matrix.preset }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Dependencies**: vcpkg managed" >> $GITHUB_STEP_SUMMARY
        echo "- **Test Framework**: Catch2 via vcpkg" >> $GITHUB_STEP_SUMMARY
        echo "- **Expected Tests**: 10 test cases, 59 assertions" >> $GITHUB_STEP_SUMMARY

